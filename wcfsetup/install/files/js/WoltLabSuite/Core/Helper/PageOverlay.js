define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPageOverlayContainer = exports.releasePageOverlayContainer = exports.adoptPageOverlayContainer = void 0;
    const container = document.createElement("div");
    container.id = "pageOverlayContainer";
    const adoptiveParents = [];
    /**
     * Adopts the page overlay container by moving it inside
     * the provided element. Required for dialogs using the
     * native `<dialog>` element to escape the top-level
     * backdrop generated by the browser.
     */
    function adoptPageOverlayContainer(element) {
        adoptiveParents.push(element);
        element.append(container);
    }
    exports.adoptPageOverlayContainer = adoptPageOverlayContainer;
    /**
     * Releases the page overlay container again, allowing
     * it to return to its previous position. Must be called
     * in reverse order to ensure the correct placement.
     */
    function releasePageOverlayContainer(element) {
        const currentParent = adoptiveParents.pop();
        if (element !== currentParent) {
            // TODO: `cause` is cast to `any` as a work-around for TS2322
            //       https://github.com/microsoft/TypeScript/pull/49639
            throw new Error("Invalid call, cannot release the page overlay while it is still adopted by another element.", {
                cause: {
                    currentParent,
                    element,
                },
            });
        }
        const previousParent = adoptiveParents[adoptiveParents.length - 1];
        if (previousParent === undefined) {
            // TODO: `cause` is cast to `any` as a work-around for TS2322
            //       https://github.com/microsoft/TypeScript/pull/49639
            throw new Error("Cannot release the page overlay, there is no previous owner.", {
                cause: {
                    element,
                },
            });
        }
        previousParent.append(container);
    }
    exports.releasePageOverlayContainer = releasePageOverlayContainer;
    /**
     * Returns the global page overlay container used for
     * elements that should be displayed out of context,
     * such as tooltips or drop-down menus.
     */
    function getPageOverlayContainer() {
        return container;
    }
    exports.getPageOverlayContainer = getPageOverlayContainer;
});
